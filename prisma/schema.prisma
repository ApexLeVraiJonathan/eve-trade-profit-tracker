// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Reference data from Adam4EVE IDs

// Item types (typeID;typeName;published)
model ItemType {
  id          Int     @id @map("type_id")
  name        String  @map("type_name")
  published   Boolean @default(false)
  volume      Float?  @map("volume") // Volume in m³ for transport calculations
  
  // Relations
  marketTrades MarketOrderTrade[]
  marketPrices MarketPrice[]
  cycleItems   CycleItem[]
  cycleTransactions CycleTransaction[]
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("item_types")
}

// Regions (regionID;regionName)
model Region {
  id          Int           @id @map("region_id")
  name        String        @map("region_name")
  
  // Relations
  solarSystems SolarSystem[]
  marketTrades MarketOrderTrade[]
  marketPrices MarketPrice[]
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("regions")
}

// Solar systems (solarSystemID;solarSystemName;regionID)
model SolarSystem {
  id          Int       @id @map("solar_system_id")
  name        String    @map("solar_system_name")
  regionId    Int       @map("region_id")
  
  // Relations
  region      Region    @relation(fields: [regionId], references: [id])
  stations    Station[]
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("solar_systems")
}

// NPC Stations (stationID;solarSystemID;stationName)
model Station {
  id              BigInt      @id @map("station_id")
  solarSystemId   Int         @map("solar_system_id")
  name            String      @map("station_name")
  
  // Relations
  solarSystem     SolarSystem @relation(fields: [solarSystemId], references: [id])
  marketTrades    MarketOrderTrade[] @relation("StationMarketTrades")
  trackedStations TrackedStation[] @relation("StationTracked")
  marketPrices    MarketPrice[] @relation("StationPrices")
  cycleTransactions CycleTransaction[]
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("stations")
}

// Tracked stations - stations we want to monitor for market data
model TrackedStation {
  id              Int         @id @default(autoincrement())
  stationId       BigInt      @unique @map("station_id")
  name            String      @map("station_name")
  isActive        Boolean     @default(true) @map("is_active")
  addedDate       DateTime    @default(now()) @map("added_date")
  notes           String?     // Optional notes about why we track this station
  
  // Relations
  station         Station?    @relation("StationTracked", fields: [stationId], references: [id])
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("tracked_stations")
}

// Market order trade data from Adam4EVE (only for tracked stations)
model MarketOrderTrade {
  id            Int         @id @default(autoincrement())
  locationId    BigInt      @map("location_id")
  regionId      Int         @map("region_id")
  typeId        Int         @map("type_id")
  isBuyOrder    Boolean     @map("is_buy_order")
  hasGone       Boolean     @map("has_gone")
  scanDate      DateTime    @map("scan_date")
  amount        BigInt
  high          Decimal     @db.Decimal(15, 2)
  low           Decimal     @db.Decimal(15, 2)
  avg           Decimal     @db.Decimal(15, 2)
  orderNum      Int         @map("order_num")
  iskValue      BigInt      @map("isk_value")
  
  // Relations
  region          Region          @relation(fields: [regionId], references: [id])
  itemType        ItemType        @relation(fields: [typeId], references: [id])
  station         Station?        @relation("StationMarketTrades", fields: [locationId], references: [id])
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Indexes for efficient querying
  @@index([scanDate, locationId, typeId]) // Most important: date + location + item
  @@index([locationId, typeId, scanDate]) // For profit analysis
  @@index([regionId, scanDate])           // Regional analysis
  @@index([typeId, scanDate])             // Item price history
  @@index([isBuyOrder, scanDate])         // Buy vs sell analysis
  
  // Prevent duplicate imports for same location/type/date/order_type
  @@unique([locationId, typeId, scanDate, isBuyOrder])
  
  @@map("market_order_trades")
}

// Real-time market prices from ESI (current buy/sell orders)
model MarketPrice {
  id              Int       @id @default(autoincrement())
  itemTypeId      Int       @map("item_type_id")
  regionId        Int       @map("region_id")
  locationId      BigInt    @map("location_id")
  orderType       String    @map("order_type") // 'buy' or 'sell'
  price           Decimal   @db.Decimal(15, 2)
  volume          Int       // Volume available at this price
  minVolume       Int?      @map("min_volume")
  duration        Int       // Order duration in days
  issued          DateTime  // When the order was issued
  orderRange      String    @map("order_range") // Order range (station, system, etc.)
  
  // Relations
  itemType        ItemType  @relation(fields: [itemTypeId], references: [id])
  region          Region    @relation(fields: [regionId], references: [id])
  station         Station?  @relation("StationPrices", fields: [locationId], references: [id])
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Indexes for efficient arbitrage queries
  @@index([itemTypeId, regionId, orderType]) // Core arbitrage query
  @@index([locationId, itemTypeId])          // Station-specific prices
  @@index([price, orderType])                // Price sorting
  @@index([issued])                          // Order age
  
  // Prevent duplicate orders (same item, location, price, type)
  @@unique([itemTypeId, locationId, orderType, price, volume, issued])
  
  @@map("market_prices")
}

// ===================================
// CYCLE MANAGEMENT SYSTEM
// ===================================

// Trading cycles - periods for arbitrage activity (1-2 weeks)
model TradingCycle {
  id              String      @id @default(cuid()) @map("cycle_id")
  name            String?     // Optional user-friendly name
  sourceHub       String      @map("source_hub") // "jita", "amarr", etc.
  
  // Financial planning
  totalCapital    BigInt      @map("total_capital") // Total ISK allocated to this cycle
  capitalUsed     BigInt      @default(0) @map("capital_used") // Actually spent ISK
  
  // Status tracking
  status          CycleStatus @default(PLANNED)
  
  // Timing
  startDate       DateTime?   @map("start_date") // When trading begins
  endDate         DateTime?   @map("end_date")   // When cycle should end
  completedAt     DateTime?   @map("completed_at") // When actually completed
  
  // Configuration
  cargoCapacity   Int         @default(60000) @map("cargo_capacity") // m³ per shipment
  minProfitMargin Float       @default(0.15) @map("min_profit_margin") // 15%
  minLiquidity    Int         @default(4) @map("min_liquidity") // Days per week traded
  
  // Transport costs per destination hub
  transportCosts  Json        @map("transport_costs") // {"amarr": 69000000, "dodixie": 24000000, ...}
  
  // Hub allocations
  hubAllocations  Json        @map("hub_allocations") // {"amarr": 0.5, "dodixie": 0.3, ...}
  
  // Performance tracking
  totalProfit     BigInt      @default(0) @map("total_profit")
  totalTransportCost BigInt   @default(0) @map("total_transport_cost")
  
  // Relations
  cycleItems      CycleItem[]
  transactions    CycleTransaction[]
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("trading_cycles")
}

// Individual items planned for a cycle (from algorithm results)
model CycleItem {
  id              String        @id @default(cuid()) @map("cycle_item_id")
  cycleId         String        @map("cycle_id")
  
  // Item details
  itemTypeId      Int           @map("item_type_id")
  itemName        String        @map("item_name")
  
  // Trade route
  sourceHub       String        @map("source_hub")
  destinationHub  String        @map("destination_hub")
  
  // Pricing (from arbitrage calculation)
  buyPrice        BigInt        @map("buy_price") // Price per unit in ISK
  sellPrice       BigInt        @map("sell_price") // Expected sell price
  
  // Quantities and logistics
  plannedQuantity Int           @map("planned_quantity") // How many to buy
  actualQuantity  Int           @default(0) @map("actual_quantity") // Actually bought
  totalCargo      Float         @map("total_cargo") // m³ for this item
  
  // Financial projections
  totalCost       BigInt        @map("total_cost") // Total ISK to buy
  expectedProfit  BigInt        @map("expected_profit") // Before transport
  transportCost   BigInt        @map("transport_cost") // Share of shipment cost
  netProfit       BigInt        @map("net_profit") // After transport
  
  // Market analysis (from arbitrage data)
  margin          Float         // Profit margin %
  profitPerM3     BigInt        @map("profit_per_m3")
  daysTraded      Int           @map("days_traded") // Liquidity metric
  totalAmountTradedPerWeek Int  @map("total_amount_traded_per_week")
  
  // Historical prices for validation
  recordedPriceLow    BigInt    @map("recorded_price_low")
  recordedPriceHigh   BigInt    @map("recorded_price_high")
  recordedPriceAvg    BigInt    @map("recorded_price_avg")
  
  // Price validation
  rawMarketPrice      BigInt    @map("raw_market_price") // Original ESI price
  validatedPrice      BigInt    @map("validated_price")  // Price used (may be capped)
  priceWasAdjusted    Boolean   @default(false) @map("price_was_adjusted")
  priceAdjustment     BigInt    @default(0) @map("price_adjustment")
  
  // Status tracking
  status          CycleItemStatus @default(PLANNED)
  
  // Relations
  cycle           TradingCycle  @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  itemType        ItemType      @relation(fields: [itemTypeId], references: [id])
  transactions    CycleTransaction[]
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("cycle_items")
}

// Actual buy/sell transactions during a cycle
model CycleTransaction {
  id              String      @id @default(cuid()) @map("transaction_id")
  cycleId         String      @map("cycle_id")
  cycleItemId     String?     @map("cycle_item_id") // Optional: link to planned item
  
  // Transaction details
  transactionType TransactionType @map("transaction_type") // BUY or SELL
  itemTypeId      Int           @map("item_type_id")
  quantity        Int           // Units bought/sold
  pricePerUnit    BigInt        @map("price_per_unit") // Actual ISK per unit
  totalValue      BigInt        @map("total_value") // Total ISK
  
  // Location and timing
  locationId      BigInt        @map("location_id") // Station where transaction happened
  executedAt      DateTime      @map("executed_at") // When transaction was done
  
  // Performance tracking
  estimatedPrice  BigInt?       @map("estimated_price") // What we expected to pay/receive
  variance        BigInt?       @default(0) // Difference from estimate
  
  // Relations
  cycle           TradingCycle  @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  cycleItem       CycleItem?    @relation(fields: [cycleItemId], references: [id])
  itemType        ItemType      @relation(fields: [itemTypeId], references: [id])
  station         Station       @relation(fields: [locationId], references: [id])
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("cycle_transactions")
}

// Enums for cycle management
enum CycleStatus {
  PLANNED     // Cycle created, items planned
  ACTIVE      // Currently executing trades
  COMPLETED   // All planned trades done
  CANCELLED   // Cycle cancelled
}

enum CycleItemStatus {
  PLANNED     // Item planned for purchase
  BUYING      // Looking for good buy orders
  BOUGHT      // Successfully purchased
  TRANSPORTING // Being moved to destination
  SELLING     // Looking for good sell orders
  SOLD        // Successfully sold
  CANCELLED   // No longer pursuing this item
}

enum TransactionType {
  BUY
  SELL
}

